{
    "[proto3]": {
        "editor.defaultFormatter": "xaver.clang-format"
    },
    "[json]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[html]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[css]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[less]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[javascript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[typescript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[jsonc]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[yaml]": {
        "editor.defaultFormatter": "redhat.vscode-yaml"
    },
    "[lua]": {
        "editor.defaultFormatter": "yinfei.luahelper"
    },
    "editor.defaultFormatter": null,
    "extensions.ignoreRecommendations": false,
    "git.autofetchPeriod": 60,
    "git.autofetch": true,
    "git.fetchOnPull": true,
    "git.autorefresh": true,
    "files.eol": "\n",
    "files.encoding": "utf8",
    "files.autoSave": "afterDelay",
    "files.autoSaveDelay": 5000,
    "editor.tabSize": 4,
    "editor.formatOnType": true,
    "editor.formatOnSaveMode": "file",
    "editor.formatOnPaste": true,
    "editor.formatOnSave": true,
    "editor.parameterHints.enabled": true,
    "editor.tabCompletion": "on",
    "editor.insertSpaces": false,
    "editor.fontFamily": "Cascadia Code",
    "scm.inputFontFamily": "Consolas",
    "debug.console.fontFamily": "Consolas",
    "terminal.integrated.fontFamily": "Consolas",
    "go.testTimeout": "3600s",
    "go.testFlags": ["-v", "-count=1"],
    "go.testEnvVars": {
        "SLOTS_NANO_RUNTIME": "local"
    },
    "go.formatTool": "gofumpt",
    "go.formatFlags": [],
    "go.lintTool": "golangci-lint",
    "go.lintOnSave": "package",
    "go.lintFlags": ["--fast"],
    "go.vetOnSave": "package",
    "go.vetFlags": ["-all"],
    "go.enableCodeLens": {
        "runtest": true
    },
    "go.inferGopath": false,
    "go.installDependenciesWhenBuilding": true,
    "go.useLanguageServer": true,
    "go.languageServerFlags": ["-rpc.trace", "serve", "--debug=localhost:6060"],
    "go.coverOnTestPackage": true,
    "go.toolsManagement.checkForUpdates": "proxy",
    "go.toolsEnvVars": {
        "GOOS": "windows",
        "GOARCH": "amd64",
        "CGO_ENABLED": "1",
        "GO111MODULE": "auto"
    },
    "python.terminal.activateEnvironment": false,
    "clang-format.style": "google",
    "clang-format.executable": "${workspaceRoot}\\bin\\clang-format.exe",
    "clang-format.language.proto.enable": true,
    "clang-format.language.proto.style": "",
    "clang-format.language.proto.fallbackStyle": "",
    "search.exclude": {
        "vendor/*": true,
        "**/.git": true,
        "**/*.exe": true,
        "go-build*": true,
        "go-link*": true,
        ".aws-sam": true,
        "**.s": true,
        "warehouse": true
    },
    "files.exclude": {
        "vendor/*": true,
        "**/.git": true,
        "**/*.exe": true,
        "go-build*": true,
        "go-link*": true,
        ".aws-sam": true,
        "**.s": true,
        "warehouse": true
    },
    "runOnSave.statusMessageTimeout": 3000,
    "runOnSave.commands": [
        {
            "match": "\\.yml$",
            "command": "Pushd ${workspaceFolder} && ${workspaceFolder}\\bin\\go-bindata -nometadata -pkg ${fileDirnameRelative} -prefix=${workspaceFolder} -o=${fileDirname}/${fileBasenameNoExtension}.yml.go ${file}",
            "runIn": "backend",
            "runningStatusMessage": "Compiling ${file}",
            "finishStatusMessage": "${file} compiled"
        },
        {
            "match": "geoip.yaml",
            "command": "Pushd ${workspaceFolder} && ${workspaceFolder}\\bin\\go-bindata -nometadata -pkg ${fileDirnameRelative} -prefix=${workspaceFolder} -o=${fileDirname}/${fileDirnameRelative}.yml.go ${fileDirname}/mmdb/GeoIP-ISP.mmdb ${fileDirname}/mmdb/GeoLite2-Country.mmdb ${file}",
            "runIn": "backend",
            "runningStatusMessage": "Compiling ${file}",
            "finishStatusMessage": "${file} compiled"
        },
        {
            "match": "\\.proto$",
            "command": "Pushd ${workspaceFolder} && ${workspaceFolder}\\bin\\protoc --proto_path=${workspaceFolder} --go_out=${workspaceFolder} --go_opt=plugins=grpc,paths=source_relative ${file} && ${workspaceFolder}\\bin\\protoc-go-inject-tag -input=${fileDirname}/${fileBasenameNoExtension}.pb.go",
            "runIn": "backend",
            "runningStatusMessage": "Compiling ${file}",
            "finishStatusMessage": "${file} compiled"
        }
    ],
    "prettier.printWidth": 160, // 超过最大值换行
    "prettier.tabWidth": 4, // 缩进字节数
    "prettier.useTabs": false, // 缩进不使用tab，使用空格
    "prettier.semi": true, // 句尾添加分号
    "prettier.singleQuote": true, // 使用单引号代替双引号
    "prettier.proseWrap": "preserve", // 默认值。因为使用了一些折行敏感型的渲染器（如GitHub comment）而按照markdown文本样式进行折行
    "prettier.arrowParens": "avoid", //  (x) => {} 箭头函数参数只有一个时是否要有小括号。avoid：省略括号
    "prettier.bracketSpacing": true, // 在对象，数组括号与文字之间加空格 "{ foo: bar }"
    "prettier.endOfLine": "auto", // 结尾是 \n \r \n\r auto
    "prettier.htmlWhitespaceSensitivity": "ignore",
    "prettier.ignorePath": ".prettierignore", // 不使用prettier格式化的文件填写在项目的.prettierignore文件中
    "prettier.bracketSameLine": false, // 在jsx中把'>' 是否单独放一行
    "prettier.jsxSingleQuote": false, // 在jsx中使用单引号代替双引号
    "prettier.requireConfig": false, // Require a 'prettierconfig' to format prettier
    "prettier.trailingComma": "es5",
    "files.watcherExclude": {
        "**/target": true
    },
    "git.ignoreLimitWarning": true,
    "stockCode": "sh000001,sz600171"
}
